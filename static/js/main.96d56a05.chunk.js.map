{"version":3,"sources":["providers/MoralisDappProvider/context.js","providers/MoralisDappProvider/MoralisDappProvider.js","helpers/formatters.js","components/Blockie.jsx","components/Address/Address.jsx","helpers/networks.js","components/Account.jsx","components/gstyles.js","components/Categories.jsx","components/Feed/components/Votes.jsx","components/Feed/components/Post.jsx","components/Feed/components/Posts.jsx","components/Reputation.jsx","components/Feed/components/AddPost.jsx","components/Feed/Feed.jsx","components/Main.jsx","App.jsx","index.js"],"names":["MoralisDappContext","React","createContext","MoralisDappProvider","children","useMoralis","web3","Moralis","user","useState","walletAddress","setWalletAddress","chainId","setChainId","contractABI","setContractABI","contractAddress","setContractAddress","selectedCategory","setSelectedCategory","useEffect","onChainChanged","chain","onAccountsChanged","address","givenProvider","selectedAddress","get","Provider","value","useMoralisDapp","context","useContext","undefined","Error","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","currency","getEllipsisTxt","str","n","substr","length","Blockie","props","currentWallet","seed","toLowerCase","className","styles","height","display","gap","backgroundColor","borderRadius","alignItems","Address","setAddress","isClicked","setIsClicked","Copy","xmlns","width","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","cursor","onClick","navigator","clipboard","writeText","d","id","avatar","size","copyable","Check","networkConfigs","currencySymbol","blockExplorerUrl","wrapped","chainName","currencyName","rpcUrl","getExplorer","account","padding","justifyContent","text","color","Account","authenticate","isAuthenticated","logout","isModalVisible","setIsModalVisible","marginRight","scale","visible","footer","onCancel","bodyStyle","fontSize","fontWeight","marginTop","href","target","rel","SelectOutlined","type","signingMessage","glStyles","card","boxShadow","border","Categories","categories","e","categoryId","filter","category","selectCategory","key","mode","ItemGroup","title","map","Item","Votes","postId","postVotes","setPostVotes","contractABIJson","JSON","parse","data","useMoralisQuery","query","equalTo","live","options","functionName","abi","params","_postId","a","enableWeb3","executeFunction","result","getPostVotes","Post","post","contentId","postOwner","content","postContent","setPosContent","voteStatus","setVoteStatus","votes","contractProcessor","useWeb3ExecuteFunction","vote","direction","message","error","fetch","onSuccess","console","log","onError","extractUri","stringify","fetchIPFSDoc","ipfsHash","url","response","json","processContent","forEach","voter","up","getPostVoteStatus","actions","createElement","LikeFilled","LikeOutlined","marginLeft","DislikeFilled","DislikeOutlined","marginBottom","author","strong","src","margin","Posts","queryPost","fetchedPosts","reverse","havePosts","emptyResult","postResult","Reputation","reputationValue","setReputation","_address","_categoryID","getReputation","AddPost","ipfsProcessor","useMoralisFile","setTitle","setContent","contentUri","_parentId","_contentUri","_categoryId","success","saveFile","base64","btoa","saveIPFS","ipfsResult","_ipfs","onSubmit","preventDefault","addPost","placeholder","onChange","rows","Feed","showAddPost","setShowAddPost","shape","Main","queryCategories","fetchedCategories","fontFamily","maxWidth","Header","Layout","header","position","zIndex","background","borderBottom","headerRight","Logo","App","isServerInfo","isWeb3Enabled","isWeb3EnableLoading","overflow","path","to","APP_ID","process","SERVER_URL","Application","appId","serverUrl","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96d56a05.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MoralisDappContext = React.createContext();\n\nexport default MoralisDappContext;\n","import React, { useEffect, useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport MoralisDappContext from \"./context\";\n\nfunction MoralisDappProvider({ children }) {\n  const { web3, Moralis, user } = useMoralis();\n  const [walletAddress, setWalletAddress] = useState();\n  const [chainId, setChainId] = useState();\n  const [contractABI, setContractABI] = useState('[{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"internalType\": \"bytes32\", \"name\": \"categoryId\", \"type\": \"bytes32\"}, {\"indexed\": false, \"internalType\": \"string\", \"name\": \"category\", \"type\": \"string\"}], \"name\": \"CategoryCreated\", \"type\": \"event\"}, {\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"internalType\": \"bytes32\", \"name\": \"contentId\", \"type\": \"bytes32\"}, {\"indexed\": false, \"internalType\": \"string\", \"name\": \"contentUri\", \"type\": \"string\"}], \"name\": \"ContentAdded\", \"type\": \"event\"}, {\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"internalType\": \"bytes32\", \"name\": \"postId\", \"type\": \"bytes32\"}, {\"indexed\": true, \"internalType\": \"address\", \"name\": \"postOwner\", \"type\": \"address\"}, {\"indexed\": true, \"internalType\": \"bytes32\", \"name\": \"parentId\", \"type\": \"bytes32\"}, {\"indexed\": false, \"internalType\": \"bytes32\", \"name\": \"contentId\", \"type\": \"bytes32\"}, {\"indexed\": false, \"internalType\": \"bytes32\", \"name\": \"categoryId\", \"type\": \"bytes32\"}], \"name\": \"PostCreated\", \"type\": \"event\"}, {\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"internalType\": \"bytes32\", \"name\": \"postId\", \"type\": \"bytes32\"}, {\"indexed\": true, \"internalType\": \"address\", \"name\": \"postOwner\", \"type\": \"address\"}, {\"indexed\": true, \"internalType\": \"address\", \"name\": \"voter\", \"type\": \"address\"}, {\"indexed\": false, \"internalType\": \"uint80\", \"name\": \"reputationPostOwner\", \"type\": \"uint80\"}, {\"indexed\": false, \"internalType\": \"uint80\", \"name\": \"reputationVoter\", \"type\": \"uint80\"}, {\"indexed\": false, \"internalType\": \"int40\", \"name\": \"postVotes\", \"type\": \"int40\"}, {\"indexed\": false, \"internalType\": \"bool\", \"name\": \"up\", \"type\": \"bool\"}, {\"indexed\": false, \"internalType\": \"uint8\", \"name\": \"reputationAmount\", \"type\": \"uint8\"}], \"name\": \"Voted\", \"type\": \"event\"}, {\"inputs\": [{\"internalType\": \"string\", \"name\": \"_category\", \"type\": \"string\"}], \"name\": \"addCategory\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"bytes32\", \"name\": \"_parentId\", \"type\": \"bytes32\"}, {\"internalType\": \"string\", \"name\": \"_contentUri\", \"type\": \"string\"}, {\"internalType\": \"bytes32\", \"name\": \"_categoryId\", \"type\": \"bytes32\"}], \"name\": \"createPost\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"bytes32\", \"name\": \"_categoryId\", \"type\": \"bytes32\"}], \"name\": \"getCategory\", \"outputs\": [{\"internalType\": \"string\", \"name\": \"\", \"type\": \"string\"}], \"stateMutability\": \"view\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"bytes32\", \"name\": \"_contentId\", \"type\": \"bytes32\"}], \"name\": \"getContent\", \"outputs\": [{\"internalType\": \"string\", \"name\": \"\", \"type\": \"string\"}], \"stateMutability\": \"view\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"bytes32\", \"name\": \"_postId\", \"type\": \"bytes32\"}], \"name\": \"getPost\", \"outputs\": [{\"internalType\": \"address\", \"name\": \"\", \"type\": \"address\"}, {\"internalType\": \"bytes32\", \"name\": \"\", \"type\": \"bytes32\"}, {\"internalType\": \"bytes32\", \"name\": \"\", \"type\": \"bytes32\"}, {\"internalType\": \"int72\", \"name\": \"\", \"type\": \"int72\"}, {\"internalType\": \"bytes32\", \"name\": \"\", \"type\": \"bytes32\"}], \"stateMutability\": \"view\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"address\", \"name\": \"_address\", \"type\": \"address\"}, {\"internalType\": \"bytes32\", \"name\": \"_categoryID\", \"type\": \"bytes32\"}], \"name\": \"getReputation\", \"outputs\": [{\"internalType\": \"uint80\", \"name\": \"\", \"type\": \"uint80\"}], \"stateMutability\": \"view\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"bytes32\", \"name\": \"_postId\", \"type\": \"bytes32\"}, {\"internalType\": \"uint8\", \"name\": \"_reputationTaken\", \"type\": \"uint8\"}], \"name\": \"voteDown\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\"}, {\"inputs\": [{\"internalType\": \"bytes32\", \"name\": \"_postId\", \"type\": \"bytes32\"}, {\"internalType\": \"uint8\", \"name\": \"_reputationAdded\", \"type\": \"uint8\"}], \"name\": \"voteUp\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\"}]');\n  const [contractAddress, setContractAddress] = useState(\"0xF92e45bFEFB0C0d8c1E2d0ffbFeA1089dE33657e\");\n  const [selectedCategory, setSelectedCategory] = useState({\"categoryId\":\"0x91\",\"category\":\"default\"});\n  \n\n\n  useEffect(() => {\n    Moralis.onChainChanged(function (chain) {\n      setChainId(chain);\n    });\n\n    Moralis.onAccountsChanged(function (address) {\n      setWalletAddress(address[0]);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => setChainId(web3.givenProvider?.chainId));\n  useEffect(\n    () => setWalletAddress(web3.givenProvider?.selectedAddress || user?.get(\"ethAddress\")),\n    [web3, user]\n  );\n\n  return (\n    <MoralisDappContext.Provider value={{ walletAddress, chainId, selectedCategory, setSelectedCategory, contractABI, setContractABI, contractAddress, setContractAddress }}>\n      {children}\n    </MoralisDappContext.Provider>\n  );\n}\n\nfunction useMoralisDapp() {\n  const context = React.useContext(MoralisDappContext);\n  if (context === undefined) {\n    throw new Error(\"useMoralisDapp must be used within a MoralisDappProvider\");\n  }\n  return context;\n}\n\nexport { MoralisDappProvider, useMoralisDapp };\n","export const n6 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 6,\n});\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4,\n});\n\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\n/**\n * Returns a string of form \"abc...xyz\"\n * @param {string} str string to string\n * @param {number} n number of chars to keep at front/end\n * @returns {string}\n */\nexport const getEllipsisTxt = (str, n = 6) => {\n  if (str) {\n    return `${str.substr(0, n)}...${str.substr(str.length - n, str.length)}`;\n  }\n  return \"\";\n};\n\nexport const tokenValue = (value, decimals) => (decimals ? value / Math.pow(10, decimals) : value);\n\n/**\n * Return a formatted string with the symbol at the end\n * @param {number} value integer value\n * @param {number} decimals number of decimals\n * @param {string} symbol token symbol\n * @returns {string}\n */\nexport const tokenValueTxt = (value, decimals, symbol) => `${n4.format(tokenValue(value, decimals))} ${symbol}`;\n","import Blockies from \"react-blockies\";\nimport { useMoralisDapp } from \"../providers/MoralisDappProvider/MoralisDappProvider\";\n\n/**\n * Shows a blockie image for the provided wallet address\n * @param {*} props\n * @returns <Blockies> JSX Elemenet\n */\n\nfunction Blockie(props) {\n  const { walletAddress } = useMoralisDapp();\n  if ((!props.address && !props.currentWallet) || !walletAddress) return null;\n\n  return (\n    <Blockies\n      seed={props.currentWallet ? walletAddress.toLowerCase() : props.address.toLowerCase()}\n      className=\"identicon\"\n      {...props}\n    />\n  );\n}\n\nexport default Blockie;\n","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useMoralisDapp } from \"../../providers/MoralisDappProvider/MoralisDappProvider\";\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\nimport Blockie from \"../Blockie\";\nimport \"./identicon.css\";\n\nconst styles = {\n  address: {\n    height: \"36px\",\n    display: \"flex\",\n    gap: \"5px\",\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    borderRadius: \"9px\",\n    alignItems: \"center\",\n  },\n};\n\nfunction Address(props) {\n  const { walletAddress } = useMoralisDapp();\n  const [address, setAddress] = useState();\n  const [isClicked, setIsClicked] = useState(false);\n\n  useEffect(() => {\n    setAddress(props?.address || walletAddress);\n  }, [walletAddress, props]);\n\n  if (!address) return null;\n\n  const Copy = () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"26\"\n      height=\"26\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"2\"\n      stroke=\"#1780FF\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      style={{ cursor: \"pointer\" }}\n      onClick={() => {\n        navigator.clipboard.writeText(address);\n        setIsClicked(true);\n      }}\n    >\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15 3v4a1 1 0 0 0 1 1h4\" />\n      <path d=\"M18 17h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h4l5 5v7a2 2 0 0 1 -2 2z\" />\n      <path d=\"M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2\" />\n      <title id=\"copy-address\">Copy Address</title>\n    </svg>\n  );\n\n  return (\n    <div style={{ ...styles.address, ...props.style }}>\n      {props.avatar === \"left\" && <Blockie address={address} size={7} />}\n      <p>{props.size ? getEllipsisTxt(address, props.size) : address}</p>\n      {props.avatar === \"right\" && <Blockie address={address} size={7} />}\n      {props.copyable && (isClicked ? <Check /> : <Copy />)}\n    </div>\n  );\n}\n\nexport default Address;\n\nconst Check = () => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    strokeWidth=\"3\"\n    stroke=\"#21BF96\"\n    fill=\"none\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M5 12l5 5l10 -10\" />\n    <title id=\"copied-address\">Copied!</title>\n  </svg>\n);\n","export const networkConfigs = {\n  \"0x1\": {\n    currencySymbol: \"ETH\",\n    blockExplorerUrl: \"https://etherscan.io/\",\n    wrapped: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n  },\n  \"0x3\": {\n    currencySymbol: \"ETH\",\n    blockExplorerUrl: \"https://ropsten.etherscan.io/\",\n  },\n  \"0x4\": {\n    currencySymbol: \"ETH\",\n    blockExplorerUrl: \"https://kovan.etherscan.io/\",\n  },\n  \"0x2a\": {\n    currencySymbol: \"ETH\",\n    blockExplorerUrl: \"https://rinkeby.etherscan.io/\",\n  },\n  \"0x5\": {\n    currencySymbol: \"ETH\",\n    blockExplorerUrl: \"https://goerli.etherscan.io/\",\n  },\n  \"0x539\": {\n    chainName: \"Local Chain\",\n    currencyName: \"ETH\",\n    currencySymbol: \"ETH\",\n    rpcUrl: \"http://127.0.0.1:7545\",\n  },\n  \"0xa86a\": {\n    chainId: 43114,\n    chainName: \"Avalanche Mainnet\",\n    currencyName: \"AVAX\",\n    currencySymbol: \"AVAX\",\n    rpcUrl: \"https://api.avax.network/ext/bc/C/rpc\",\n    blockExplorerUrl: \"https://cchain.explorer.avax.network/\",\n  },\n  \"0x38\": {\n    chainId: 56,\n    chainName: \"Smart Chain\",\n    currencyName: \"BNB\",\n    currencySymbol: \"BNB\",\n    rpcUrl: \"https://bsc-dataseed.binance.org/\",\n    blockExplorerUrl: \"https://bscscan.com/\",\n    wrapped: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n  },\n  \"0x61\": {\n    chainId: 97,\n    chainName: \"Smart Chain - Testnet\",\n    currencyName: \"BNB\",\n    currencySymbol: \"BNB\",\n    rpcUrl: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n    blockExplorerUrl: \"https://testnet.bscscan.com/\",\n  },\n  \"0x89\": {\n    chainId: 137,\n    chainName: \"Polygon Mainnet\",\n    currencyName: \"MATIC\",\n    currencySymbol: \"MATIC\",\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com/\",\n    blockExplorerUrl: \"https://explorer-mainnet.maticvigil.com/\",\n    wrapped: \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\n  },\n  \"0x13881\": {\n    chainId: 80001,\n    chainName: \"Mumbai\",\n    currencyName: \"MATIC\",\n    currencySymbol: \"MATIC\",\n    rpcUrl: \"https://rpc-mumbai.matic.today/\",\n    blockExplorerUrl: \"https://mumbai.polygonscan.com/\",\n  },\n};\n\nexport const getNativeByChain = (chain) =>\n  networkConfigs[chain]?.currencySymbol || \"NATIVE\";\n\nexport const getChainById = (chain) => networkConfigs[chain]?.chainId || null;\n\nexport const getExplorer = (chain) => networkConfigs[chain]?.blockExplorerUrl;\n\nexport const getWrappedNative = (chain) =>\n  networkConfigs[chain]?.wrapped || null;\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\nimport Blockie from \"./Blockie\";\nimport { Button, Card, Modal } from \"antd\";\nimport { useState } from \"react\";\nimport Address from \"./Address/Address\";\nimport { SelectOutlined } from \"@ant-design/icons\";\nimport { getExplorer } from \"helpers/networks\";\nconst styles = {\n  account: {\n    height: \"42px\",\n    padding: \"0 15px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"fit-content\",\n    borderRadius: \"12px\",\n    backgroundColor: \"rgb(244, 244, 244)\",\n    cursor: \"pointer\",\n  },\n  text: {\n    color: \"#21BF96\",\n  },\n};\n\nfunction Account() {\n  const { authenticate, isAuthenticated, logout } = useMoralis();\n  const { walletAddress, chainId } = useMoralisDapp();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  if (!isAuthenticated) {\n    return (\n      <div\n        style={styles.account}\n        onClick={() => authenticate({ signingMessage: \"Hello World!\" })}\n      >\n        <p style={styles.text}>Authenticate</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div style={styles.account} onClick={() => setIsModalVisible(true)}>\n        <p style={{ marginRight: \"5px\", ...styles.text }}>\n          {getEllipsisTxt(walletAddress, 6)}\n        </p>\n        <Blockie currentWallet scale={3} />\n      </div>\n      <Modal\n        visible={isModalVisible}\n        footer={null}\n        onCancel={() => setIsModalVisible(false)}\n        bodyStyle={{\n          padding: \"15px\",\n          fontSize: \"17px\",\n          fontWeight: \"500\",\n        }}\n        style={{ fontSize: \"16px\", fontWeight: \"500\" }}\n        width=\"400px\"\n      >\n        Account\n        <Card\n          style={{\n            marginTop: \"10px\",\n            borderRadius: \"1rem\",\n          }}\n          bodyStyle={{ padding: \"15px\" }}\n        >\n          <Address\n            avatar=\"left\"\n            size={6}\n            copyable\n            style={{ fontSize: \"20px\" }}\n          />\n          <div style={{ marginTop: \"10px\", padding: \"0 10px\" }}>\n            <a\n              href={`${getExplorer(chainId)}/address/${walletAddress}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <SelectOutlined style={{ marginRight: \"5px\" }} />\n              View on Explorer\n            </a>\n          </div>\n        </Card>\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          style={{\n            width: \"100%\",\n            marginTop: \"10px\",\n            borderRadius: \"0.5rem\",\n            fontSize: \"16px\",\n            fontWeight: \"500\",\n          }}\n          onClick={() => {\n            logout();\n            setIsModalVisible(false);\n          }}\n        >\n          Disconnect Wallet\n        </Button>\n      </Modal>\n    </>\n  );\n}\n\nexport default Account;\n","const glStyles = {\n    card: {\n      boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n      backgroundColor: \"white\",\n      border: \"1px solid #e7eaf3\",\n      borderRadius: \"0.5rem\",\n      fontSize: \"16px\",\n      color: \"#1F3947\",\n    },\n  };\n  export default glStyles;","import {useMoralisDapp} from \"providers/MoralisDappProvider/MoralisDappProvider\"\nimport {Menu } from \"antd\"\nimport glStyles from \"./gstyles\" \n\nconst Categories = ({categories}) => {\n    const { setSelectedCategory } = useMoralisDapp();\n    \n    function selectCategory(categoryId) {\n        const selectedCategory = categories.filter((category) => category[\"categoryId\"] === categoryId);\n        setSelectedCategory(selectedCategory[0]);\n    }\n    \n    return (\n        <div className=\"col-lg-3\">\n            \n            <Menu \n            onClick={(e) => selectCategory(e.key)}\n            style={{ ...glStyles.card, padding: \"10px 0\" }} \n            mode=\"inline\">\n                <Menu.ItemGroup key=\"categories\" title=\"Categories\">\n                    {categories.map((category) => (\n                        <Menu.Item key={category[\"categoryId\"]}>{category[\"category\"]}</Menu.Item>\n                    ))}\n                </Menu.ItemGroup>\n            </Menu>\n        </div>\n    )\n}\n\nexport default Categories\n","import { useState, useEffect } from \"react\";\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\n\n\nconst Votes = ({postId}) => {\n    const {Moralis} = useMoralis();\n    const [postVotes, setPostVotes] = useState(\"0\");\n    const { contractABI, contractAddress} = useMoralisDapp();\n    const contractABIJson = JSON.parse(contractABI)\n    \n    const { data } = useMoralisQuery(\"Votes\", (query) => query.equalTo(\"postId\", postId), [], { live: true });\n    const options = {\n        contractAddress: contractAddress,\n        functionName: \"getPost\",\n        abi: contractABIJson,\n        params: {\n          _postId: postId\n        }\n      };\n    \n    useEffect(() => {\n        async function getPostVotes() {\n            await Moralis.enableWeb3;\n            const result = await Moralis.executeFunction(options);\n            setPostVotes(result[3]);\n        }\n        getPostVotes();\n    }, [data]);\n    \n    return (\n        <>\n          {postVotes}  \n        </>\n    )\n}\n\nexport default Votes\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useMoralisQuery, useWeb3ExecuteFunction } from \"react-moralis\";\nimport { useEffect, useState, createElement } from \"react\";\nimport { Comment, Tooltip, Avatar, message, Divider } from \"antd\";\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from \"@ant-design/icons\";\nimport Text from \"antd/lib/typography/Text\";\nimport Blockie from \"components/Blockie\";\nimport glStyles from \"components/gstyles\";\nimport Votes from \"./Votes\"\n\nconst Post = ({post}) => {\n    const { contentId, postId, postOwner } = post;\n    const [postContent, setPosContent] = useState({ title: \"default\", content: \"default\" });\n    const { data } = useMoralisQuery(\"Contents\", (query) => query.equalTo(\"contentId\", contentId));\n    const [voteStatus, setVoteStatus] = useState();\n    const { data: votes } = useMoralisQuery(\"Votes\", (query) => query.equalTo(\"postId\", postId), [], {\n        live: true,\n    });\n    \n    const { walletAddress, contractABI, contractAddress} = useMoralisDapp();\n    const contractABIJson = JSON.parse(contractABI);\n    const contractProcessor = useWeb3ExecuteFunction();\n\n\n    useEffect(() => {\n        function extractUri(data) {\n          const fetchedContent = JSON.parse(JSON.stringify(data, [\"contentUri\"]));\n          const contentUri = fetchedContent[0][\"contentUri\"];\n          return contentUri;\n        }\n        async function fetchIPFSDoc(ipfsHash) {\n          console.log(ipfsHash);\n          const url = ipfsHash;\n          const response = await fetch(url);\n          return await response.json();\n        }\n        async function processContent() {\n          const content = await fetchIPFSDoc(extractUri(data));\n          setPosContent(content);\n        }\n        if (data.length > 0) {\n          processContent();\n        }\n      }, [data]);\n    \n    useEffect(() => {\n        if (!votes?.length) return null;\n\n        async function getPostVoteStatus() {\n            const fetchedVotes = JSON.parse(JSON.stringify(votes));\n            fetchedVotes.forEach(({ voter, up }) => {\n            if (voter === walletAddress) setVoteStatus(up ? \"liked\" : \"disliked\");\n            });\n            return;\n        }\n\n        getPostVoteStatus();\n    }, [votes, walletAddress]);\n    \n\n    async function vote(direction){\n        if (walletAddress.toLowerCase() === postOwner.toLowerCase()) return message.error(\"You cannot vote on your posts\");\n        if (voteStatus) return message.error(\"Already voted\");\n        const options = {\n            contractAddress: contractAddress,\n            functionName: direction,\n            abi: contractABIJson,\n            params: {\n              _postId: post[\"postId\"],\n              [direction === \"voteDown\" ? \"_reputationTaken\" : \"_reputationAdded\"]: 1,\n            },\n          };\n          await contractProcessor.fetch({\n            params: options,\n            onSuccess: () => console.log(\"success\"),\n            onError: (error) => console.error(error),\n          });\n    }\n    \n    const actions = [\n    <Tooltip key=\"comment-basic-like\" title=\"Vote Up\">\n        <span\n        style={{ fontSize: \"15px\", display: \"flex\", alignItems: \"center\", marginRight: \"16px\" }}\n        onClick={() => vote(\"voteUp\")}\n        >\n        {createElement(voteStatus === \"liked\" ? LikeFilled : LikeOutlined)} Vote Up\n        </span>\n    </Tooltip>,\n    <span style={{ fontSize: \"15px\" }}><Votes postId={postId}/></span>,\n    <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\n        <span\n        style={{ fontSize: \"15px\", display: \"flex\", alignItems: \"center\", marginLeft: \"8px\" }}\n        onClick={() => vote(\"voteDown\")}\n        >\n        {createElement(voteStatus === \"disliked\" ? DislikeFilled : DislikeOutlined)} Vote Down\n        </span>\n    </Tooltip>,\n    ];  \n\n    const loading = \"\";\n\n    const result = (\n        <Comment\n        style={{ ...glStyles.card, padding: \"0px 15px\", marginBottom: \"10px\" }}\n        actions={actions}\n        author={<Text strong>{post[\"postOwner\"]}</Text>}\n        avatar={<Avatar src={<Blockie address={post[\"postOwner\"]} scale=\"4\" />}></Avatar>}\n        content={\n            <>\n            <Text strong style={{ fontSize: \"20px\", color: \"#333\" }}>\n                {postContent[\"title\"]}\n            </Text>\n            <p style={{ fontSize: \"15px\", color: \"#111\" }}>{postContent[\"content\"]}</p>\n            <Divider style={{ margin: \"15px 0\" }} />\n            </>\n        }\n      />\n    )\n    \n    \n    return postContent[\"title\"] === \"default\" ? loading : result;\n}\n\nexport default Post\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useMoralisQuery } from \"react-moralis\";\nimport Post from \"./Post\"\n\nconst Posts = () => {\n    const { selectedCategory } = useMoralisDapp();\n    \n    const queryPost = useMoralisQuery(\n        \"Posts\",\n        (query) => query.equalTo(\"categoryId\", selectedCategory[\"categoryId\"]),\n        [selectedCategory],\n        { live: true }\n      );\n\n    const fetchedPosts = JSON.parse(JSON.stringify(queryPost.data, [\"postId\", \"contentId\", \"postOwner\"])).reverse();\n    const havePosts = fetchedPosts.length > 0 ? true : false;\n\n    const emptyResult = (\n                        <div>\n                            <h3>Be the first to post here for</h3>\n                            <h3>{selectedCategory[\"category\"]} </h3>\n                        </div>\n                    );\n    \n    const postResult = (<div>\n                            {fetchedPosts.map((post) => (\n                                <Post key={post[\"postId\"]} post={post} />\n                            ))}\n                        </div>)\n\n    return havePosts ? postResult : emptyResult;\n}\n\nexport default Posts\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useMoralisQuery, useMoralis, } from \"react-moralis\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst Reputation = () => {\n    const {Moralis} = useMoralis();\n    const { walletAddress, contractABI, contractAddress, selectedCategory} = useMoralisDapp();\n    const [reputationValue, setReputation] = useState(0);\n    const contractABIJson = JSON.parse(contractABI)\n    \n    const { data: votes } = useMoralisQuery(\"Votes\", (query) => query.equalTo(\"postOwner\", walletAddress), [], {\n        live: true,\n      });\n    \n    const categoryId = selectedCategory[\"categoryId\"]\n\n    const options = {\n        contractAddress: contractAddress,\n        functionName: \"getReputation\",\n        abi: contractABIJson,\n        params: {\n            _address: walletAddress,\n            _categoryID:categoryId\n        }\n    };\n    \n    useEffect(() => {\n    \n      async function getReputation() {\n        await Moralis.enableWeb3();\n        const result = await Moralis.executeFunction(options);\n        setReputation(result);\n      }\n    \n        getReputation();\n      }, [votes, walletAddress, categoryId]);\n\n    return (\n        <>{reputationValue}</>\n    )\n}\n\nexport default Reputation\n","import {useMoralisDapp} from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport {useMoralisFile} from \"react-moralis\";\nimport {useWeb3ExecuteFunction} from \"react-moralis\";\nimport {useState} from \"react\";\nimport {message} from \"antd\";\n\nconst AddPost = () => {\n    const {contractABI, contractAddress, selectedCategory} = useMoralisDapp();\n    const contractABIJson = JSON.parse(contractABI);\n    const ipfsProcessor = useMoralisFile();\n    const contractProcessor = useWeb3ExecuteFunction();\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    \n    async function addPost(post) {\n        const contentUri = await processContent(post); \n        const categoryId = selectedCategory[\"categoryId\"];\n        const options = {\n            contractAddress: contractAddress,\n            functionName: \"createPost\",\n            abi: contractABIJson,\n            params: {\n                _parentId: \"0x91\",\n                _contentUri: contentUri,\n                _categoryId: categoryId\n            },\n            }\n        await contractProcessor.fetch({params:options,\n            onSuccess: () => message.success(\"success\"),\n            onError: (error) => message.error(error),\n        });\n    }\n\n    const processContent = async (content) => {\n        const ipfsResult = await ipfsProcessor.saveFile(\n            \"post.json\",\n            { base64: btoa(JSON.stringify(content)) },\n            { saveIPFS: true}\n        )\n        return ipfsResult._ipfs;\n    }\n\n    const validateForm = () => {\n        let result = !title || !content ? false: true;\n        return result\n    }\n\n   const clearForm = () =>{\n        setTitle('');\n        setContent('');\n    }\n    \n    function onSubmit(e){\n        e.preventDefault();\n        if(!validateForm()){\n            return message.error(\"Remember to add the title and the content of your post\")\n        }\n        addPost({title, content})\n        clearForm();\n    }\n    \n    \n\n    return (\n        <form onSubmit={onSubmit}>\n        <div className =\"row\">\n            <div className=\"form-group\">\n                <input\n                type=\"text\"\n                className=\"mb-2 mt-2 form-control\"\n                placeholder=\"Title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                />\n                <textarea\n                type='text'\n                className=\"mb-2 form-control\"\n                placeholder=\"Post away\"\n                rows=\"5\"\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n                />\n            </div>\n            <button type=\"submit\" className=\"btn btn-dark \">Submit</button>\n        </div>\n    </form>\n    )\n}\n\nexport default AddPost\n","import {useMoralisDapp} from \"providers/MoralisDappProvider/MoralisDappProvider\"\nimport {useState} from \"react\"\nimport Posts from \"./components/Posts\"\nimport Reputation from \"components/Reputation\"\n\nimport {Avatar, Button }from \"antd\" \nimport glStyles from \"components/gstyles\"\nimport Blockie from \"components/Blockie\"\nimport AddPost from \"./components/AddPost\"\n\nconst Feed = () => {\n    const {selectedCategory} = useMoralisDapp();\n    const [showAddPost, setShowAddPost] = useState(false)\n\n    let result = null;\n    \n    function toogleShowAddPost(){\n        setShowAddPost(!showAddPost);\n    }\n\n    if (selectedCategory[\"category\"] === \"default\") {\n        result = (\n          <div className=\"col-lg-9\">\n            <h3>Choose a Category</h3>\n          </div>\n        );\n      }\n    else {\n        result = (\n        <div className=\"col-lg-9\">\n            <div\n                style={{\n                    ...glStyles.card,\n                    padding: \"10px 13px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                }}\n            >\n                <Avatar src={<Blockie currentWallet />} />\n                <h4> Your Reputation in {selectedCategory[\"category\"]} is <Reputation/> </h4>\n                <Button shape=\"round\" onClick={toogleShowAddPost}>\n                    Post\n                </Button>\n            </div>\n            {showAddPost ? <AddPost/>:\"\"}\n            <Posts/>\n        </div>    \n        )\n    }\n    \n    return result;\n}\n\nexport default Feed\n","import { useMoralisQuery } from \"react-moralis\";\nimport Categories from \"./Categories\"\nimport Feed from \"./Feed\"\n\nconst Main = () => {\n    const queryCategories = useMoralisQuery(\"Categories\");\n    const fetchedCategories = JSON.parse(JSON.stringify(queryCategories.data, [\"categoryId\", \"category\"]));\n\n    console.log(fetchedCategories)\n    return (\n        <div className=\"container\">\n            <div style={{\n                display: \"flex\",\n                fontFamily: \"Roboto, sans-serif\",\n                color: \"#041836\",\n                padding: \"10px 30px\",\n                maxWidth: \"1200px\",\n                width: \"100%\",\n                gap: \"20px\",\n                }}>\n                <Categories categories={fetchedCategories}/>\n                <Feed/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Main","import { useEffect } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport Account from \"components/Account\";\nimport { Layout} from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./style.css\";\nimport Main from \"components/Main\"\nconst { Header} = Layout;\n\nconst styles = {\n  content: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    fontFamily: \"Roboto, sans-serif\",\n    color: \"#041836\",\n    marginTop: \"130px\",\n    padding: \"10px\",\n  },\n  header: {\n    position: \"fixed\",\n    zIndex: 1,\n    width: \"100%\",\n    background: \"#fff\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    fontFamily: \"Roboto, sans-serif\",\n    borderBottom: \"2px solid rgba(0, 0, 0, 0.06)\",\n    padding: \"0 10px\",\n    boxShadow: \"0 1px 10px rgb(151 164 175 / 10%)\",\n  },\n  headerRight: {\n    display: \"flex\",\n    gap: \"20px\",\n    alignItems: \"center\",\n    fontSize: \"15px\",\n    fontWeight: \"600\",\n  },\n};\nconst App = ({ isServerInfo }) => {\n  const { isWeb3Enabled, enableWeb3, isAuthenticated, isWeb3EnableLoading } =\n    useMoralis();\n\n  useEffect(() => {\n    if (isAuthenticated && !isWeb3Enabled && !isWeb3EnableLoading) enableWeb3();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAuthenticated, isWeb3Enabled]);\n\n  return (\n    <Layout style={{ height: \"100vh\", overflow: \"auto\" }}>\n      <Router>\n        <Header style={styles.header}>\n          <Logo />\n          <div style={styles.headerRight}>\n            <Account />\n          </div>\n        </Header>\n        <div style={styles.content}>\n          <Switch>\n            <Route path=\"/main\">\n                <Main/>\n            </Route>\n            <Route path=\"/nonauthenticated\">\n              <h3>Please login using the \"Authenticate\" button</h3>\n            </Route>\n          </Switch>\n          {isAuthenticated ? <Redirect to=\"/main\" /> : <Redirect to=\"/nonauthenticated\" />}\n        </div>\n      </Router>\n    </Layout>\n  );\n};\n\nexport const Logo = () => <><h4>Venn-Reddit</h4><h4><a href=\"https://vennverse.github.io/Social-media/\">Home</a></h4></> \n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { MoralisProvider } from \"react-moralis\";\nimport \"./index.css\";\nimport { MoralisDappProvider } from \"./providers/MoralisDappProvider/MoralisDappProvider\";\n\n/** Get your free Moralis Account https://moralis.io/ */\n\nconst APP_ID = process.env.REACT_APP_MORALIS_APPLICATION_ID;\nconst SERVER_URL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\nconst Application = () => {\n  const isServerInfo = APP_ID && SERVER_URL ? true : false;\n  if (isServerInfo)\n    return (\n      <MoralisProvider appId={APP_ID} serverUrl={SERVER_URL}>\n        <MoralisDappProvider>\n          <App isServerInfo />\n        </MoralisDappProvider>\n      </MoralisProvider>\n    );\n};\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Application />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}